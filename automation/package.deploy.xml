<?xml version="1.0" encoding="UTF-8"?>
<project name="analytics" default="build">
    <property file="./common.properties" override="true" />
    <property file="./developer.properties" override="true" />

    <!--
      ============================================
      Target: clean up
      ============================================
    -->
    <target name="cleanup"
            description="Clean up build directory">
        <echo msg="Clean up build directory" />
        <delete dir="${build.local.source.path}"
                includeemptydirs="true" />
        <delete dir="${build.local.release.path}"
                includeemptydirs="true" />
    </target>

    <!--
      ============================================
      Target: prepare
      ============================================
    -->
    <target name="prepare"
            description="Prepare build directory"
            depends="cleanup">
        <echo msg="Prepare build directory" />
        <mkdir dir="${build.local.path}" />
        <mkdir dir="${build.local.source.path}" />
        <mkdir dir="${build.local.release.path}" />

        <echo msg="Archive master" />
        <exec command="git archive --format zip --output ${build.local.source.path}/build.zip master"
              dir="${project.local.source.path}"
              checkreturn="true" />

        <echo msg="${build.local.source.path}" />
        <echo msg="Unzip git archive" />
        <unzip file="${build.local.source.path}/build.zip"
               todir="${build.local.source.path}" />

        <echo msg="Delete archive" />
        <delete file="${build.local.source.path}/build.zip" />

        <echo msg="Clean up branch from unwanted directories" />
        <delete includeemptydirs="true" dir="${build.local.source.path}/cache" />
        <delete includeemptydirs="true" dir="${build.local.source.path}/logs" />
        <delete includeemptydirs="true" dir="${build.local.source.path}/vendor" />
    </target>

    <!--
      ============================================
      Target: configure-build
      ============================================
    -->
    <target name="configure-build">
        <propertyprompt propertyName="environment"
                        promptText="Enter environment to build [devel/stable]" />

        <propertyprompt propertyName="version"
                        promptText="Enter version to build" />
    </target>

    <!--
      ============================================
      Target: build-assets
      ============================================
    -->
    <target name="build-assets"
            description="Build project assets files"
            depends="build-assets-js">
        <echo msg="Build project assets files" />
    </target>

    <!--
      ============================================
      Target: build-code-php-lint
      ============================================
    -->
    <target name="build-code-php-lint"
            description="Check PHP files syntax"
            depends="">
        <echo msg="Check PHP files syntax" />
        <phplint tofile="/tmp/files">
            <fileset dir="${build.local.source.path}">
                <include name="**/*.php"/>
            </fileset>
        </phplint>
    </target>

    <!--
      ============================================
      Target: build-code-php-clean
      ============================================
    -->
    <target name="build-code-php-clean"
            description="Clean unnecessary PHP files"
            depends="">
        <echo msg="Clean unnecessary PHP files" />

        <delete includeemptydirs="true" dir="${build.local.source.path}/tmp" />
        <delete includeemptydirs="true" dir="${build.local.source.path}/vendor" />
    </target>

    <!--
      ============================================
      Target: build-code
      ============================================
    -->
    <target name="build-code"
            description="Build project PHP code files"
            depends="build-code-php-clean, build-code-php-lint">
        <echo msg="Build project PHP code files" />
        <copy file="${build.local.source.path}/app/config/parameters.yml.dist" tofile="${build.local.source.path}/app/config/parameters.yml" overwrite="true"/>
        <exec command="COMPOSER_PROCESS_TIMEOUT=600 composer install"
              dir="${build.local.source.path}"
              logoutput="true"
              checkreturn="true" />
        <exec command="php app/console assets:install --env=prod"
              dir="${build.local.source.path}"
              logoutput="true"
              checkreturn="true" />
        <exec command="php app/console assetic:dump --env=prod --no-debug"
              dir="${build.local.source.path}"
              logoutput="true"
              checkreturn="true" />
    </target>

    <!--
      ============================================
      Target: build-package
      ============================================
    -->
    <target name="build-package"
            description="Build project package from processed sources"
            depends="build-code">
        <echo msg="Create install scripts" />
        <echo file="${build.local.source.path}/after-install.sh">#!/bin/bash
# Refresh REVISION file
echo ${version} > /var/www/${project.name}/releases/${environment}/${version}/REVISION

# Delete cache direcotry
rm -fr /var/www/${project.name}/releases/${environment}/${version}/app/cache

# Create necessary framework directories
mkdir /var/www/${project.name}/releases/${environment}/${version}/app/cache
mkdir /var/www/${project.name}/releases/${environment}/${version}/app/logs

# Change framework directories permissions
chmod 777 /var/www/${project.name}/releases/${environment}/${version}/app/cache
chmod 777 /var/www/${project.name}/releases/${environment}/${version}/app/logs
chmod 755 /var/www/${project.name}/releases/${environment}/${version}/console

# fix for bootstrap symlink build folder
ln -nsf /var/www/${project.name}/releases/${environment}/${version}/vendor/twbs/bootstrap /var/www/${project.name}/releases/${environment}/${version}/web/bundles/mopabootstrap
            
# Clear app cache
cd /var/www/${project.name}/releases/${environment}/${version}/ &amp;&amp; php app/console cache:clear --env=prod --no-debug

# Change ownership
chown -R www-data:www-data /var/www/${project.name}/releases/${environment}/${version}

# Change symlink
ln -nsf /var/www/${project.name}/releases/${environment}/${version} /var/www/${project.name}/releases/${environment}/running
</echo>

        <echo msg="Choosing config file" />
        <if>
            <available file="${build.local.source.path}/src/config/registry_${environment}.php"/>
            <then>
              <echo msg="Enviroment config found: registry_${environment}.php" />
              <copy file="${build.local.source.path}/src/config/registry_${environment}.php"
                    tofile="${build.local.source.path}/src/config/registry.php"
                    overwrite="true"/>
            </then>
        </if>

        <echo msg="Build project package from processed sources" />
        <exec command="cd ${build.local.source.path} &amp;&amp;
                       fpm -s dir -t deb
                           --name ${project.name}-${environment}
                           --version ${version}
                           --architecture all
                           --vendor LeadBullet
                           --category webapp
                           --maintainer ${developer.email}
                           --prefix /var/www/${project.name}/releases/${environment}/${version}
                           --after-install ./after-install.sh
                           ." />
    </target>

    <!--
      ============================================
      Target: build
      ============================================
    -->
    <target name="build"
            description="Build project"
            depends="configure-build, prepare, build-code, build-assets, build-package">
        <echo msg="Build project" />
    </target>

   <!--
      ============================================ 
      Target: deploy
      ============================================
    -->
    <target name="deploy"
          description="Deploy release into production environment"
          depends="build">

        <propertyprompt propertyName="revision" 
                    promptText="Enter revision to deploy" />
        <foreach list="${servers.web.hosts}" param="host" target="deploy-single" />
    </target>

    <!--
      ============================================
      Target: deploy-single
      ============================================
    -->
    <target name="deploy-single"
            description="Deploy project"
            depends="build">
        <echo msg="Deploy project" />

        <ftpdeploy
            host="${servers.ftp.host}"
            port="${servers.ftp.port}"
            username="${servers.ftp.username}"
            password="${servers.ftp.password}"
            dir="/projects/${environment}">
            <fileset dir="${build.local.source.path}">
                <include name="${project.name}-${environment}_${version}_all.deb"/>
            </fileset>
        </ftpdeploy>
    </target>
</project>