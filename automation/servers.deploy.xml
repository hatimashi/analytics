<?xml version="1.0" encoding="UTF-8"?>
<project name="analytics" default="build">
  <property file="./common.properties" />
  <property file="./developer.properties" />
  
  <taskdef name="build-one-file" classname="task.BuildOneFileTask" />
  
  <!--
    ============================================ 
    Target: clean up
    ============================================
  -->
  <target name="cleanup"
          description="Clean up build directory">
    <echo msg="Clean up build directory" />
    <delete dir="${build.local.source.path}"
            includeemptydirs="true" />
    <delete dir="${build.local.release.path}"
            includeemptydirs="true" />
  </target>
  
  <!--
    ============================================ 
    Target: prepare
    ============================================
  -->
  <target name="prepare"
          description="Prepare build directory"
          depends="cleanup">
    <echo msg="Prepare build directory" />
    <mkdir dir="${build.local.path}" />
    <mkdir dir="${build.local.source.path}" />
    <mkdir dir="${build.local.release.path}" />
    
    <echo msg="Archive master" />
    <exec command="./bin/git-archive-all.sh --format zip --unpack --overwrite ${build.local.source.path}"
		      dir="${project.local.source.path}"
          checkreturn="true" />

    <echo msg="Clean up branch from unwanted directories" />
    <delete includeemptydirs="true" dir="${build.local.source.path}/cache" />
    <delete includeemptydirs="true" dir="${build.local.source.path}/log" />
    <delete includeemptydirs="true" dir="${build.local.source.path}/web/uploads" />
    
    <echo msg="Clean up branch from development front controllers" />
    <delete>
      <fileset dir="${build.local.source.path}/web">
        <include name="*_dev.php" />
      </fileset>
    </delete>
  </target>
  
  <!--
    ============================================ 
    Target: build-assets-js
    ============================================
  -->
  <target name="build-assets-js"
          description="Build JavaScript assets files"
          depends="">
    <echo msg="Build JavaScript assets files with requirejs" />
    <exec dir="${build.local.source.path}/web/js"
          command="node ${build.local.source.path}/lib/vendor/requirejs/r.js -o name=main out=main.js baseUrl=. mainConfigFile=config.js"
          logoutput="true"
          checkreturn="true" />
    
    <echo msg="Remove original version of application JavaScripts" />
    <delete includeemptydirs="true" dir="${build.local.source.path}/web/js/app" />
    <delete includeemptydirs="true">
      <fileset dir="${build.local.source.path}/web/js">
        <include name="app.js" />
        <include name="order.js" />
      </fileset>
    </delete>
    
    <echo msg="Build Javascript widget assets files with yuicompressor" />
    <exec command="for file in `find ${build.local.source.path}/web/widget -name *.js`; 
                     do java -jar ${build.local.source.path}/lib/vendor/yuicompressor/build/yuicompressor-2.4.7.jar --type js --charset utf-8 -o $file $file;
                   done"
          logoutput="true" 
          checkreturn="true" />
  </target>
  
  <!--
    ============================================ 
    Target: build-assets-css
    ============================================
  -->
  <target name="build-assets-css"
          description="Build CSS assets files"
          depends="">
    <echo msg="Build CSS assets files with yuicompressor" />
    <exec command="for file in `find ${build.local.source.path}/web -name *.css`; 
                     do java -jar ${build.local.source.path}/lib/vendor/yuicompressor/build/yuicompressor-2.4.7.jar --type css --charset utf-8 -o $file $file;
                   done"
          logoutput="true"
          checkreturn="true" />
  </target>
  
  <!--
    ============================================ 
    Target: build-assets
    ============================================
  -->
  <target name="build-assets"
          description="Build project assets files"
          depends="build-assets-css, build-assets-js">
    <echo msg="Build project assets files" />
  </target>
  
  <!--
    ============================================ 
    Target: build-code-php-lint
    ============================================
  -->
  <target name="build-code-php-lint"
          description="Check PHP files syntax"
          depends="">
    <echo msg="Check PHP files syntax" />
    <phplint tofile="/tmp/files">
      <fileset dir="${build.local.source.path}">
        <include name="**/*.php"/>
      </fileset>
    </phplint>
  </target>
  
  <!--
    ============================================ 
    Target: build-code-php-prepare
    ============================================
  -->
  <target name="build-code-php-prepare"
          description="Prepare project PHP files"
          depends="">
    <echo msg="Prepare project PHP files" />
    
    <exec command="php -d memory_limit=64M ${build.local.source.path}/symfony propel:build-model &amp;&amp;
                   php -d memory_limit=64M ${build.local.source.path}/symfony propel:build-filters &amp;&amp;
                   php -d memory_limit=64M ${build.local.source.path}/symfony propel:build-forms"
          checkreturn="true" />
  </target>
  
  <!--
    ============================================ 
    Target: build-code-php-clean
    ============================================
  -->
  <target name="build-code-php-clean"
          description="Clean unnecessary PHP files"
          depends="">
    <echo msg="Clean unnecessary PHP files" />
    
    <delete includeemptydirs="true" dir="${build.local.source.path}/cache" />
    <delete includeemptydirs="true" dir="${build.local.source.path}/log" />
  </target>
  
  <!--
    ============================================ 
    Target: build-code-php-widget
    ============================================
  -->
  <target name="build-code-php-widget"
          description="Building widget files to one file">
    <build-one-file inputFile="/web/widget/build.php" 
                    outputFile="/web/widget/build.php.build" 
                    path="${build.local.source.path}" />
    
    <move file="${build.local.source.path}/web/widget/build.php.build" 
          tofile="${build.local.source.path}/web/widget/build.php"
          overwrite="true">
      <filterchain>
        <striplinecomments>
          <comment value="# " />
          <comment value="// " />
        </striplinecomments>
        <replaceregexp>
          <regexp pattern="(\s*)(.*)(\n)" replace="\2\3" />
        </replaceregexp>
      </filterchain>
    </move>
    
    <phplint file="${build.local.source.path}/web/widget/build.php" haltonfailure="true" />
  </target>
  
  <!--
    ============================================ 
    Target: build-code
    ============================================
  -->
  <target name="build-code"
          description="Build project PHP code files"
          depends="build-code-php-prepare, build-code-php-widget, build-code-php-clean, build-code-php-widget">
    <echo msg="Build project PHP code files" />
  </target>
  
  <!--
    ============================================ 
    Target: build-archive
    ============================================
  -->
  <target name="build-archive"
          description="Build project archive from processed sources"
          depends="build-code">
    <echo msg="Build project archive from processed sources" />
    <zip destfile="${build.local.release.path}/build.zip"
         basedir="${build.local.source.path}" />
  </target>
  
  <!--
    ============================================ 
    Target: build
    ============================================
  -->
  <target name="build"
          description="Build project"
          depends="prepare, build-code, build-assets, build-archive">
    <echo msg="Build project" />
  </target>
  
  <!--
    ============================================ 
    Target: release-current
    ============================================
  -->
  <target name="release-current">
    <propertyprompt propertyName="environment" 
                    promptText="Enter environment to check [beta/production]" />
    <foreach list="${servers.web.hosts}" param="host" target="release-current-single" />
  </target>
  
  <!--
    ============================================ 
    Target: release-current-single
    ============================================
  -->
  <target name="release-current-single"
          description="Get current release on given environment"
          depends="">
    <echo msg="Get current ${environment} release on given environment on ${host}" />
    <ssh username="${servers.web.user}" 
         host="${host}" 
         port="22"
         pubkeyfile="${servers.cert.key_pub}"
         privkeyfile="${servers.cert.key_priv}"
         privkeyfilepassphrase="${servers.cert.pass}"
         command="cat ${servers.web.path}/releases/${environment}/REVISION "
         display="true" />
  </target>
  
  <!--
    ============================================ 
    Target: release-list
    ============================================
  -->
  <target name="release-list">
    <foreach list="${servers.web.hosts}" param="host" target="release-list-single" />
  </target>
  
  <!--
    ============================================ 
    Target: release-list-single
    ============================================
  -->
  <target name="release-list-single"
          description="List all available releases on production"
          depends="">
    <echo msg="List all available releases on ${host}" />
    <ssh username="${servers.web.user}" 
         host="${host}" 
         port="22"
         pubkeyfile="${servers.cert.key_pub}"
         privkeyfile="${servers.cert.key_priv}"
         privkeyfilepassphrase="${servers.cert.pass}"
         command="ls -tl --full-time ${servers.web.path}/releases | awk '{ print $6 &quot; &quot; $9}'" 
         display="true" />
  </target>
  
  <!--
    ============================================ 
    Target: release-switch
    ============================================
  -->
  <target name="release-switch">
    <propertyprompt propertyName="environment" 
                    promptText="Enter environment to switch [beta/production]" />
    <propertyprompt propertyName="revision" 
                    promptText="Enter revision to switch" />

    <foreach list="${servers.web.hosts}" param="host" target="release-switch-single" />
    
    <if>
      <equals arg1="${environment}" arg2="beta" />
      <then>
        <foreach list="${servers.web.hosts}" param="host" target="release-refresh-apc-single" />
        <foreach list="${servers.web.hosts}" param="host" target="release-refresh-assets-single" />
      </then>
    </if>
  </target>
  
  <!--
    ============================================ 
    Target: release-switch-single
    ============================================
  -->
  <target name="release-switch-single"
          description="Switch environment to specific revision"
          depends="">      
    <echo msg="Switch ${environment} environment to specific revision on ${host}" />
    <ssh username="${servers.web.user}" 
         host="${host}" 
         port="22"
         pubkeyfile="${servers.cert.key_pub}"
         privkeyfile="${servers.cert.key_priv}"
         privkeyfilepassphrase="${servers.cert.pass}"
         command="ln -f -n -s ${servers.web.path}/releases/${revision} ${servers.web.path}/releases/${environment} &amp;&amp;
                  echo `date` REV: ${revision} >> ${servers.web.path}/releases/CHANGELOG_`echo ${environment} | tr '[a-z]' '[A-Z]'`" 
         display="true" />
    <echo msg="Environment ${environment} switched to revision ${revision}" />
  </target>
  
  <!--
    ============================================ 
    Target: release-refresh-apc-single
    ============================================
  -->
  <target name="release-refresh-apc-single"
          description="Refresh modify time on all PHP files"
          depends="">
    <echo msg="Refresh files modify time on ${environment} release on given environment on ${host}" />
    <ssh username="${servers.web.user}" 
         host="${host}" 
         port="22"
         pubkeyfile="${servers.cert.key_pub}"
         privkeyfile="${servers.cert.key_priv}"
         privkeyfilepassphrase="${servers.cert.pass}"
         command="for file in `find ${servers.web.path}/releases/${environment}/ -name '*.php' -type f | grep -v '/test' | grep -v '/sfDoctrinePlugin'`; do touch $file; done;"
         display="true" />
  </target>
  
  <!--
    ============================================ 
    Target: release-refresh-assets-single
    ============================================
  -->
  <target name="release-refresh-assets-single"
          description="Refresh modify time on all assets files"
          depends="">
    <echo msg="Refresh files modify time on ${environment} release on given environment on ${host}" />
    <ssh username="${servers.web.user}" 
         host="${host}" 
         port="22"
         pubkeyfile="${servers.cert.key_pub}"
         privkeyfile="${servers.cert.key_priv}"
         privkeyfilepassphrase="${servers.cert.pass}"
         command="for file in `find ${servers.web.path}/releases/${environment}/web/images -type f`; do touch $file; done;
                  for file in `find ${servers.web.path}/releases/${environment}/web/css -type f`; do touch $file; done;
                  for file in `find ${servers.web.path}/releases/${environment}/web/js -type f`; do touch $file; done;"
         display="true" />
  </target>
  
  <!--
    ============================================ 
    Target: release-deploy
    ============================================
  -->
  <target name="release-deploy"
          description="Deploy release into production environment"
          depends="build">
    <propertyprompt propertyName="revision" 
                    promptText="Enter revision to deploy" />
    <foreach list="${servers.web.hosts}" param="host" target="release-deploy-single" />
  </target>
  
  <!--
    ============================================ 
    Target: release-deploy-single
    ============================================
  -->
  <target name="release-deploy-single">
    <echo msg="Deploy release into production environment" />
    
    <echo msg="Upload build archive" />
    <scp username="${servers.web.user}" 
         host="${host}" 
         port="22"
         pubkeyfile="${servers.cert.key_pub}"
         privkeyfile="${servers.cert.key_priv}"
         privkeyfilepassphrase="${servers.cert.pass}"
         todir="${servers.web.path}/releases"
         file="${build.local.release.path}/build.zip" />
    
    <echo msg="Unpack build archive to specific directory" />
    <ssh username="${servers.web.user}" 
         host="${host}" 
         port="22"
         pubkeyfile="${servers.cert.key_pub}"
         privkeyfile="${servers.cert.key_priv}"
         privkeyfilepassphrase="${servers.cert.pass}"
         command="unzip ${servers.web.path}/releases/build.zip -d ${servers.web.path}/releases/${revision} &amp;&amp;
                  rm ${servers.web.path}/releases/build.zip &amp;&amp;
                  echo ${revision} > ${servers.web.path}/releases/${revision}/REVISION &amp;&amp;
                  mkdir ${servers.web.path}/releases/${revision}/cache &amp;&amp;
                  mkdir ${servers.web.path}/releases/${revision}/log &amp;&amp;
                  chmod 777 ${servers.web.path}/releases/${revision}/cache &amp;&amp;
                  chmod 777 ${servers.web.path}/releases/${revision}/log &amp;&amp;
                  ln -f -n -s ${servers.web.path}/shared/web/uploads ${servers.web.path}/releases/${revision}/web/uploads &amp;&amp;
                  ln -f -n -s ${servers.web.path}/shared/uploads ${servers.web.path}/releases/${revision}/uploads &amp;&amp;
                  php -d memory_limit=64M ${servers.web.path}/releases/${revision}/symfony plugin:publish-assets &amp;&amp;
                  php -d memory_limit=64M ${servers.web.path}/releases/${revision}/symfony propel:build-model &amp;&amp;
                  php -d memory_limit=64M ${servers.web.path}/releases/${revision}/symfony propel:build-filters &amp;&amp;
                  php -d memory_limit=64M ${servers.web.path}/releases/${revision}/symfony propel:build-forms &amp;&amp;
                  php -d memory_limit=64M ${servers.web.path}/releases/${revision}/symfony app:registry-generate-config --env=prod &amp;&amp;
                  php -d memory_limit=64M ${servers.web.path}/releases/${revision}/symfony project:cache-warmup --env=prod &amp;&amp;
                  echo DONE"
         display="true" />
  </target>
</project>